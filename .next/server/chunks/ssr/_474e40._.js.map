{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/rajmotwani/Downloads/wealth-ai-app/actions/account.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { revalidatePath } from \"next/cache\";\n\nconst serializeDecimal = (obj) => {\n  const serialized = { ...obj };\n  if (obj.balance) {\n    serialized.balance = obj.balance.toNumber();\n  }\n  if (obj.amount) {\n    serialized.amount = obj.amount.toNumber();\n  }\n  return serialized;\n};\n\nexport async function getAccountWithTransactions(accountId) {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  const account = await db.account.findUnique({\n    where: {\n      id: accountId,\n      userId: user.id,\n    },\n    include: {\n      transactions: {\n        orderBy: { date: \"desc\" },\n      },\n      _count: {\n        select: { transactions: true },\n      },\n    },\n  });\n\n  if (!account) return null;\n\n  return {\n    ...serializeDecimal(account),\n    transactions: account.transactions.map(serializeDecimal),\n  };\n}\n\nexport async function bulkDeleteTransactions(transactionIds) {\n  try {\n    const { userId } = await auth();\n    if (!userId) throw new Error(\"Unauthorized\");\n\n    const user = await db.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user) throw new Error(\"User not found\");\n\n    // Get transactions to calculate balance changes\n    const transactions = await db.transaction.findMany({\n      where: {\n        id: { in: transactionIds },\n        userId: user.id,\n      },\n    });\n\n    // Group transactions by account to update balances\n    const accountBalanceChanges = transactions.reduce((acc, transaction) => {\n      const change =\n        transaction.type === \"EXPENSE\"\n          ? transaction.amount\n          : -transaction.amount;\n      acc[transaction.accountId] = (acc[transaction.accountId] || 0) + change;\n      return acc;\n    }, {});\n\n    // Delete transactions and update account balances in a transaction\n    await db.$transaction(async (tx) => {\n      // Delete transactions\n      await tx.transaction.deleteMany({\n        where: {\n          id: { in: transactionIds },\n          userId: user.id,\n        },\n      });\n\n      // Update account balances\n      for (const [accountId, balanceChange] of Object.entries(\n        accountBalanceChanges\n      )) {\n        await tx.account.update({\n          where: { id: accountId },\n          data: {\n            balance: {\n              increment: balanceChange,\n            },\n          },\n        });\n      }\n    });\n\n    revalidatePath(\"/dashboard\");\n    revalidatePath(\"/account/[id]\");\n\n    return { success: true };\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n}\n\nexport async function updateDefaultAccount(accountId) {\n  try {\n    const { userId } = await auth();\n    if (!userId) throw new Error(\"Unauthorized\");\n\n    const user = await db.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    // First, unset any existing default account\n    await db.account.updateMany({\n      where: {\n        userId: user.id,\n        isDefault: true,\n      },\n      data: { isDefault: false },\n    });\n\n    // Then set the new default account\n    const account = await db.account.update({\n      where: {\n        id: accountId,\n        userId: user.id,\n      },\n      data: { isDefault: true },\n    });\n\n    revalidatePath(\"/dashboard\");\n    return { success: true, data: serializeTransaction(account) };\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///Users/rajmotwani/Downloads/wealth-ai-app/app/%28main%29/account/_components/transaction-table.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TransactionTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call TransactionTable() from the server but TransactionTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/transaction-table.jsx <module evaluation>\",\n    \"TransactionTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,sFACA"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///Users/rajmotwani/Downloads/wealth-ai-app/app/%28main%29/account/_components/transaction-table.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TransactionTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call TransactionTable() from the server but TransactionTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/transaction-table.jsx\",\n    \"TransactionTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,kEACA"}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file:///Users/rajmotwani/Downloads/wealth-ai-app/app/%28main%29/account/_components/account-chart.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AccountChart = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccountChart() from the server but AccountChart is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/account-chart.jsx <module evaluation>\",\n    \"AccountChart\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,kFACA"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/rajmotwani/Downloads/wealth-ai-app/app/%28main%29/account/_components/account-chart.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AccountChart = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccountChart() from the server but AccountChart is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/account/_components/account-chart.jsx\",\n    \"AccountChart\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,8DACA"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file:///Users/rajmotwani/Downloads/wealth-ai-app/app/%28main%29/account/%5Bid%5D/page.jsx"],"sourcesContent":["import { Suspense } from \"react\";\nimport { getAccountWithTransactions } from \"@/actions/account\";\nimport { BarLoader } from \"react-spinners\";\nimport { TransactionTable } from \"../_components/transaction-table\";\nimport { notFound } from \"next/navigation\";\nimport { AccountChart } from \"../_components/account-chart\";\n\nexport default async function AccountPage({ params }) {\n  const accountData = await getAccountWithTransactions(params.id);\n\n  if (!accountData) {\n    notFound();\n  }\n\n  const { transactions, ...account } = accountData;\n\n  return (\n    <div className=\"space-y-8 px-5\">\n      <div className=\"flex gap-4 items-end justify-between\">\n        <div>\n          <h1 className=\"text-5xl sm:text-6xl font-bold tracking-tight gradient-title capitalize\">\n            {account.name}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {account.type.charAt(0) + account.type.slice(1).toLowerCase()}{\" \"}\n            Account\n          </p>\n        </div>\n\n        <div className=\"text-right pb-2\">\n          <div className=\"text-xl sm:text-2xl font-bold\">\n            ${parseFloat(account.balance).toFixed(2)}\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            {account._count.transactions} Transactions\n          </p>\n        </div>\n      </div>\n\n      {/* Chart Section */}\n      <Suspense\n        fallback={<BarLoader className=\"mt-4\" width={\"100%\"} color=\"#9333ea\" />}\n      >\n        <AccountChart transactions={transactions} />\n      </Suspense>\n\n      {/* Transactions Table */}\n      <Suspense\n        fallback={<BarLoader className=\"mt-4\" width={\"100%\"} color=\"#9333ea\" />}\n      >\n        <TransactionTable transactions={transactions} />\n      </Suspense>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AACA;AACA;AADA;AAFA;;;;;;;;AAKe,eAAe,YAAY,EAAE,MAAM,EAAE;IAClD,MAAM,cAAc,MAAM,CAAA,GAAA,kHAAA,CAAA,6BAA0B,AAAD,EAAE,OAAO,EAAE;IAE9D,IAAI,CAAC,aAAa;QAChB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,MAAM,EAAE,YAAY,EAAE,GAAG,SAAS,GAAG;IAErC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC;gCAAG,WAAU;0CACX,QAAQ,IAAI;;;;;;0CAEf,8OAAC;gCAAE,WAAU;;oCACV,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,WAAW;oCAAI;oCAAI;;;;;;;;;;;;;kCAKvE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;oCAAgC;oCAC3C,WAAW,QAAQ,OAAO,EAAE,OAAO,CAAC;;;;;;;0CAExC,8OAAC;gCAAE,WAAU;;oCACV,QAAQ,MAAM,CAAC,YAAY;oCAAC;;;;;;;;;;;;;;;;;;;0BAMnC,8OAAC,qMAAA,CAAA,WAAQ;gBACP,wBAAU,8OAAC,6LAAA,CAAA,YAAS;oBAAC,WAAU;oBAAO,OAAO;oBAAQ,OAAM;;;;;;0BAE3D,cAAA,8OAAC,8JAAA,CAAA,eAAY;oBAAC,cAAc;;;;;;;;;;;0BAI9B,8OAAC,qMAAA,CAAA,WAAQ;gBACP,wBAAU,8OAAC,6LAAA,CAAA,YAAS;oBAAC,WAAU;oBAAO,OAAO;oBAAQ,OAAM;;;;;;0BAE3D,cAAA,8OAAC,kKAAA,CAAA,mBAAgB;oBAAC,cAAc;;;;;;;;;;;;;;;;;AAIxC"}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}